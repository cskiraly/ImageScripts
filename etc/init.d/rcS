#!/bin/sh
# RC Script for Tiny Core Linux
# (c) Robert Shingledecker 2004-2012
# Several modifications for speed by Curaga
. /etc/init.d/tc-functions

USER="tc"
INSTALLED=""

addUser(){
	ID=$(echo $(ls -ld /etc) | cut -d ' ' -f 3)
	echo "${GREEN}Adding user ${YELLOW} $USER ($ID) ${NORMAL}"
	/bin/adduser -s /bin/sh -G staff -u $ID -D "$USER"
	echo "$USER":sfingi | /sbin/chpasswd -m
	echo -e "$USER\tALL=NOPASSWD: ALL" >> /etc/sudoers
	setupHome
}

### END functions

# Main
clear
echo "${GREEN}Booting ${YELLOW}Core $VERSION ${NORMAL}"

# Remount rootfs rw.
/bin/mount -o remount,rw /

mkdir /proc
mkdir /sys
mkdir /tmp
mkdir /home
mkdir /root
mkdir /opt
mkdir -p /dev/pts
mkdir -p /dev/shm
mkdir -p /var/run
mkdir -p /var/log
mkdir -p /var/tmp
chmod a+rw /tmp
echo "Sfingi VR" > /etc/issue
# Mount /proc.
[ -f /proc/cmdline ] || /bin/mount /proc

ln -s /proc/mounts /etc/mtab

# Mount system devices from /etc/fstab.
/bin/mount -a

KERNEL="$(uname -r)"
echo "${GREEN}Running Linux Kernel ${YELLOW}$KERNEL${GREEN}.${NORMAL}"
export PATH=/usr/local/sbin:/usr/local/bin:"$PATH"

HOST=sfingivr
# Here we check all the boot parameters using the fastest way known to men, case & loop
echo -n "${BLUE}Checking boot options...${NORMAL}"
for i in `cat /proc/cmdline`; do
	case $i in
		*=*)
			case $i in
				waitusb*) WAITUSB=${i#*=} ;;
				lang*) LANGUAGE=${i#*=} ;;
				kmap*) KEYMAP=${i#*=} ;;
				tz*) TZ=${i#*=} ;;
				user*) USER=${i#*=} ;;
				home*) MYHOME=${i#*=} ;;
				opt*) MYOPT=${i#*=} ;;
				swapfile*) SWAPFILE=${i#*=} ;;
				host*) HOST=${i#*=} ;;
				rsyslog=* ) RSYSLOG=${i#*=}; SYSLOG=1 ;;
				blacklist* ) BLACKLIST="$BLACKLIST ${i#*=}" ;;
			esac
		;;
		*)
			case $i in
				nofstab) NOFSTAB=1 ;;
				syslog) SYSLOG=1 ;;
				noutc) NOUTC=1 ;;
				superuser) SUPERUSER=1 ;;
				noswap) NOSWAP=1 ;;
				cron) CRON=1 ;;
				noautologin) NOAUTOLOGIN=1 ;;
				pause) PAUSE=1 ;;
			esac
		;;
	esac
done
echo "${GREEN}Done.${NORMAL}"

if [ -n "$BLACKLIST" ]; then
	mkdir -p /etc/modprobe.d
	for i in $BLACKLIST; do
		echo "$i" | tr ',' '\n' | while read j ; do
			echo "blacklist $j" >> /etc/modprobe.d/blacklist.conf
		done
	done
fi

# Start Udev to populate /dev and handle hotplug events
echo -n "${BLUE}Starting mdev daemon for hotplug support...${NORMAL}"
echo /sbin/mdev_wrap.sh > /proc/sys/kernel/hotplug
mdev -s
wait $!
ALIASES=$(find /sys/devices -name modalias)
for A in $ALIASES
 do
  MOD=$(grep -v cpu $A)
  if [ x$MOD != x ]
   then
    /sbin/modprobe -- $MOD 2>/dev/null
   fi
 done
echo "${GREEN}Done.${NORMAL}"

[ -n "$WAITUSB" ] && (
	case $WAITUSB in
		*:*) dev=${WAITUSB#*:}
		timeout=$((${WAITUSB%:*} * 4))
		while [ $timeout -gt 0 ]; do
			echo -en "${BLUE}\rWaiting as requested ... ${NORMAL}$(($timeout / 4)) "
			timeout=$(($timeout - 1))
			sleep 0.25
			blkid -lt $dev >/dev/null && timeout=0
		done
		echo
		;;
		*) sleep "$WAITUSB" ;;
	esac
)

modprobe loop 2>/dev/null
#modprobe ohci_hcd

if [ -n "$NOFSTAB" ]; then
	echo "${BLUE}Skipping /etc/fstab creation as requested from the boot command line.${NORMAL}"
else
	echo "${BLUE}Scanning hard disk partitions to create ${YELLOW}/etc/fstab ${NORMAL}"
	modprobe scsi_wait_scan 2>/dev/null
	/sbin/rebuildfstab & fstab_pid=$!
#	mv /tmp/98-tc.rules /etc/udev/rules.d/. 2>/dev/null
#	/sbin/udevadm control --reload-rules &
fi

if [ -n "$SYSLOG" ]; then
	 [ -z "$RSYSLOG" ] || SOPTS=" -L -R $RSYSLOG "
	 /sbin/syslogd ${SOPTS} && echo "${GREEN}syslog started.${NORMAL}"
	 /sbin/klogd && echo "${GREEN}klog started."
fi

[ -n "$LANGUAGE" ] || LANGUAGE="C"
echo -n "${GREEN}Setting Language to ${MAGENTA}$LANGUAGE"
[ -f /etc/sysconfig ] || mkdir /etc/sysconfig
echo "LANG=$LANGUAGE" > /etc/sysconfig/language
echo "${GREEN} Done.${NORMAL}"

if [ -n "$TZ" ]; then
	echo -n "${GREEN}Setting Timezone to ${MAGENTA}$TZ"
	export TZ && echo "TZ=$TZ" > /etc/sysconfig/timezone
	echo "${GREEN} Done.${NORMAL}"
fi	

echo -n "${GREEN}Waiting for RTC..."
while [ ! -e /dev/rtc0 ]; do usleep 50000; done
echo "${GREEN} Done.${NORMAL}"
if [ -n "$NOUTC" ]; then
	 hwclock -l -s &
else
	 hwclock -u -s &
fi

echo $HOST > /etc/hostname
/bin/hostname -F /etc/hostname
rm -f /etc/hosts
cat >/etc/hosts <<EOT
127.0.0.1 $HOSTNAME localhost
EOT


/sbin/ifconfig lo 127.0.0.1 up
/sbin/route add 127.0.0.1 lo &

chown root:root /bin/busybox /bin/sudo /etc/sudoers
chmod u+s  /bin/busybox /bin/sudo

touch /var/tmp/k5_skip

if grep -q "^/dev/root" /proc/mounts; then
	INSTALLED=1
	echo "${RED}Detected Traditional (Scatter) Hard drive installation.${NORMAL}"
fi

/sbin/ldconfig 2>/dev/null

if [ -n "$USER" ]; then
#	if ! grep "$USER" /etc/passwd >/dev/null; then addUser; fi
	echo User: $USER
else
	USER="tc"
fi
addUser

echo "$USER" > /etc/sysconfig/tcuser
if [ -n "$SUPERUSER" ]; then
	touch /etc/sysconfig/superuser
fi
mkdir -p /home/"$USER"
    	   
# Preload drivers needed for tce/opt/home on lvm/RAID etc
unset HOME_SETUP
if [ -n "$MYHOME" ]; then
	wait $fstab_pid
	PARTITION=${MYHOME##/dev/}
	find_mountpoint "$PARTITION"
	if [ -n "$MOUNTPOINT" ]; then
		[ "$MOUNTED" == "yes" ] || mount "$MOUNTPOINT"

		MS_MNTS=`mount|awk '$5~/fat|vfat|msdos|ntfs/{printf "%s ",$3}'`
		case "$MS_MNTS" in 
			*"$MOUNTPOINT"* )
				echo "Persistent HOME not supported on Microsoft File Systems."
				echo "${YELLOW}Request for persistent HOME on $PARTITION ignored."
				echo -n "${RED}Press Enter key.${NORMAL}"; read ans
			;;
			* )
				if [ -d "$MOUNTPOINT/home/$USER" ]; then
					mount --bind "$MOUNTPOINT/home" /home
					HOME_SETUP=1
				else
					mkdir -p "$MOUNTPOINT/home/$USER"
					mount --bind "$MOUNTPOINT/home" /home
				fi
			;;
		esac

	else
		echo "Invalid device specified. Ignoring persistent HOME request!"
	fi
fi

[ ! "$HOME_SETUP" ] && setupHome

unset OPT_SETUP
if [ -n "$MYOPT" ]; then
	wait $fstab_pid
	PARTITION=${MYOPT##/dev/}
	find_mountpoint "$PARTITION"
	if [ -n "$MOUNTPOINT" ]; then
		[ "$MOUNTED" == "yes" ] || mount "$MOUNTPOINT"

		MS_MNTS=`mount|awk '$5~/fat|vfat|msdos|ntfs/{printf "%s ",$3}'`
		case "$MS_MNTS" in 
			*"$MOUNTPOINT"* )
				echo "Persistent OPT not supported on Microsoft File Systems."
				echo "${YELLOW}Request for persistent OPT on $PARTITION ignored."
				echo -n "${RED}Press Enter key.${NORMAL}"; read ans
			;;
			* )
				[ -d "$MOUNTPOINT"/opt ] || mkdir "$MOUNTPOINT"/opt
				yes n | cp -ai /opt/. "$MOUNTPOINT"/opt/ 2>/dev/null
				mount --bind "$MOUNTPOINT"/opt/ /opt/
				chgrp -R staff /opt/ >/dev/null 2>&1
				chmod -R g+w /opt/ >/dev/null 2>&1
				chmod g+s /opt/ >/dev/null 2>&1
			;;
		esac

	else
		echo "Invalid device specified. Skipping persistent OPT request!"
	fi
fi

if [ -n "$NOSWAP" ]; then
	echo "${BLUE}Ignoring swap partition(s) seek as requested.${NORMAL}"
else
	wait $fstab_pid
	/sbin/swapon -a 2>/dev/null
	if [ "$?" == 0 ]; then echo "${GREEN}Possible swap partition(s) enabled.${NORMAL}"; fi
fi

if [ -n "$SWAPFILE" ]; then
	wait $fstab_pid
	SWAPFILE=${SWAPFILE##/dev/}
	find_mountpoint "$SWAPFILE"
	if [ -n "$MOUNTPOINT" ]; then
		if [ "$MOUNTED" == "yes" ]; then
			swapon "$MOUNTPOINT"/tc.swp
		else
			mount "$MOUNTPOINT" && swapon "$MOUNTPOINT"/tc.swp
		fi
	fi
fi

sync

wait $fstab_pid

[ -n "$KEYMAP" ] || KEYMAP="us"
if [ -f "/usr/share/kmap/$KEYMAP.kmap" ]; then
	echo -n "${GREEN}Setting keymap to ${MAGENTA}$KEYMAP"
	/sbin/loadkmap < /usr/share/kmap/$KEYMAP.kmap
	echo "KEYMAP=$KEYMAP" > /etc/sysconfig/keymap
	echo "${GREEN} Done.${NORMAL}"
fi

[ -n "$CRON" ] && /etc/init.d/services/crond start

cp /etc/init.d/root_profile /root/.profile
chmod +x /root/.profile

chmod a+rw /dev/null
chmod a+rw /dev/zero

/opt/bootlocal.sh
sleep 5

[ -n "$NOAUTOLOGIN" ] && echo "booting" > /etc/sysconfig/noautologin

if [ -n "$PAUSE" ]; then
	echo -n "${BLUE}Boot time configuration completed. Press <Enter> to continue.${NORMAL}"
	read junk
fi
