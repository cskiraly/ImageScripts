# Command Line, proc might not be mounted
[ -f /proc/cmdline ] || /bin/mount /proc
CMDLINE=""; CMDLINE=" $(cat /proc/cmdline)"
# ANSI COLORS
CRE="$(echo -e '\r\033[K')"
RED="$(echo -e '\033[1;31m')"
GREEN="$(echo -e '\033[1;32m')"
YELLOW="$(echo -e '\033[1;33m')"
BLUE="$(echo -e '\033[1;34m')"
MAGENTA="$(echo -e '\033[1;35m')"
CYAN="$(echo -e '\033[1;36m')"
WHITE="$(echo -e '\033[1;37m')"
NORMAL="$(echo -e '\033[0;39m')"

trim() { echo $1; }

stringinfile(){
case "$(cat $2)" in *$1*) return 0;; esac
return 1
}

stringinstring(){
case "$2" in *$1*) return 0;; esac
return 1
}

getbootparam(){
stringinstring " $1=" "$CMDLINE" || return 1
result="${CMDLINE##*$1=}"
result="${result%%[ 	]*}"
echo "$result"
return 0
}

getparam(){
stringinstring " $1=" "$2" || return 1
result="${2##*$1=}"
result="${result%%[ 	]*}"
echo "$result"
return 0
}

checkbootparam(){
stringinstring " $1" "$CMDLINE"
return "$?"
}

getbasefile(){
BASENAME=`basename $1`
FIELDS=`echo $BASENAME|awk 'BEGIN{ FS="."} {print NF}'`
FIELDS=`busybox expr "$FIELDS" - "$2"`
INFO=`echo $BASENAME|cut -f1-$FIELDS -d.`
echo $INFO
return 0
}

mounted(){
grep $1 /etc/mtab >/dev/null 2>&1
if [ $? == 0 ]; then return 0; fi
return 1
}

find_mountpoint() {
 MOUNTPOINT=""
 MOUNTED="no"
 D2="$1"
 if [ "${D2:0:6}" == "LABEL=" ]; then
   LABEL=$(echo $D2 | cut -d '=' -f 2)
   D2=$(/sbin/blkid | grep LABEL= | grep $LABEL | cut -d ':' -f 1) 
   if [ "$?" != 0 ]; then
     MOUNTPOINT=""
     return
   else
     D2="${D2%%:*}"
   fi
 else
   D2=/dev/$D2
 fi
 MOUNTPOINT="$(grep -i ^$D2\  /etc/mtab|awk '{print $2}'|head -n 1)"
 if [ -n "$MOUNTPOINT" ]; then
   MOUNTED="yes"
   return
 fi

 MOUNTPOINT="$(grep -i ^$D2\  /etc/fstab|awk '{print $2}'|head -n 1)"
}

status() {
  local CHECK=$?
  echo -en "\\033[70G[ "
  if [ $CHECK = 0 ]; then
    echo -en "\\033[1;33mOK"
  else
    echo -en "\\033[1;31mFailed"
  fi
  echo -e "\\033[0;39m ]"
}

usleep_progress() {
# Wait 2 seconds
  CHAR='.'
  for i in `seq 1 79`
  do
    echo -n "$CHAR"
    usleep 25316
  done
  echo "$CHAR"
}

checkroot() {
 if [ `/usr/bin/id -u` -ne 0 ]; then
   echo "Need root privileges." >&2
   exit 1
 fi
}
 
checknotroot() {
 if [ `/usr/bin/id -u` -eq 0 ]; then
   echo "Don't run this as root." >&2
   exit 1
 fi
}

checkX() {
 if [ -z ${DISPLAY} ]; then
   echo "Requires X windows." >&2
   exit 1
 fi
}

setupHome(){
   yes n | cp -ai /etc/skel/. /home/"$USER"/ 2>/dev/null
   chown -Rh "$USER".staff /home/"$USER"
   chmod g+s /home/"$USER"
}

getMajorVer() {
awk '{printf "%d", $1}' /usr/share/doc/tc/release.txt 
}

getMirror() {
read MIRROR < /opt/tcemirror
MIRROR="${MIRROR%/}/$(getMajorVer).x/x86/tcz"
}

installed() {
  if [ -e /usr/local/tce.installed/${1%.*} ]; then 
    return 0
  else 
    return 1
  fi
}  

getKeyEventDevice() {
e=0
for i in /sys/class/input/input*/name; do
  if grep -q "eyboard" $i; then break; fi 
  e=`busybox expr "$e" + 1`
done
[ $e -gt 0 ] || exit 1
echo /dev/input/event$e
}
